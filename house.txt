import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df = pd.read_csv('/content/drive/My Drive/housing.csv')
df.head()
df.shape
df.info()
df.describe()
df.duplicated().sum()#will count the no of duplicate rows

x = df.drop(columns=['MEDV'])
y = df['MEDV']

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_scaled = sc.fit_transform(x)#calculate mean(0) and standaard deviation(1) of each feature in x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x_scaled,y,test_size=0.2,random_state=1)

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()#layers are added one after another in stack
model.add(Dense(128,activation='relu',input_shape=(13,)))
model.add(Dense(64,activation='relu'))
model.add(Dense(28,activation='relu'))
model.add(Dense(1,activation='linear'))

model.summary()

model.compile(loss='mse',optimizer='adam',metrics=['mae'])  #adaptive optimization algorithm

model.fit(x_train,y_train,epochs=50,validation_split=0.2)

pred = model.predict(x_test) #for each sample in x_test it predicts a value

from sklearn.metrics import mean_squared_error
mean_squared_error(y_test,pred)

y_test_array = y_test.to_numpy()
y_pred_array = pred.reshape(-1)


plt.figure(figsize=(8, 6))
plt.scatter(y_test_array, y_pred_array, color='blue', alpha=0.6)
plt.plot([y_test_array.min(), y_test_array.max()], [y_test_array.min(), y_test_array.max()], color='red', linestyle='--')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.grid(True)
plt.show()
